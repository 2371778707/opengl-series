#version 150

uniform mat4 model;
uniform sampler2D tex;

uniform struct Light {
   vec3 position;
   vec3 color; //a.k.a intensity
} light;

in vec2 fragTexCoord;
in vec3 fragNormal;
in vec3 fragVert;

out vec4 finalColor;

void main() {
    //calculate normal in world coordinates
    vec3 normal = transpose(inverse(mat3(model))) * fragNormal;
    normal = normalize(normal);
    
    //calculate the location of this fragment (pixel) in world coordinates
    vec3 fragPosition = vec3(model * vec4(fragVert, 1));
    
    //calculate the direction from this pixel to the light source
    vec3 directionToLight = normalize(light.position - fragPosition);

    //calculate the cosine of the angle of incidence
    float cosAngleOfIncidence = dot(normal, directionToLight);
    cosAngleOfIncidence = clamp(cosAngleOfIncidence, 0, 1);

    //calculate final color of the pixel, based on:
    // 1. The angle of incidence: cosAngleOfIncidence
    // 2. The color of the light: light.color
    // 3. The texture and texture coord: texture(tex, fragTexCoord)
    finalColor = cosAngleOfIncidence * vec4(light.color, 1) * texture(tex, fragTexCoord);
}